# -*- coding: utf-8 -*-
"""DEG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sFjZiyuFFe767XOZLBIu_Xv9xo_HcViP
"""

!pip install GEOparse statsmodels matplotlib seaborn

import GEOparse
import pandas as pd
import statsmodels.api as sm
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Download GSE166622
gse = GEOparse.get_GEO("GSE166622", destdir="./")
gpl = list(gse.gpls.keys())[0]
samples = gse.gsms

# Build expression DataFrame
data = pd.DataFrame()
for gsm_name, gsm in samples.items():
    data[gsm_name] = gsm.table['VALUE'].astype(float)

data.index = gsm.table['ID_REF']

# Example: define groups
# Adjust based on actual sample metadata
groups = ['control']*3 + ['infected']*3
design = pd.get_dummies(groups, drop_first=True)

# Run linear model for each gene
pvals = []
logfc = []
for gene in data.index:
    y = data.loc[gene].values
    model = sm.OLS(y, sm.add_constant(design)).fit()
    pvals.append(model.pvalues[0])
    logfc.append(model.params[0])

results = pd.DataFrame({"logFC":logfc, "pval":pvals}, index=data.index)
results['adj_pval'] = sm.stats.multipletests(results['pval'], method='fdr_bh')[1]

results.to_csv("GSE166622_DEG_python.csv")
print(results.head())

# Volcano plot
results['-log10pval'] = -np.log10(results['pval'])
sns.scatterplot(data=results, x='logFC', y='-log10pval')
plt.axvline(1, color='red', linestyle='--')
plt.axvline(-1, color='red', linestyle='--')
plt.axhline(-np.log10(0.05), color='blue', linestyle='--')
plt.title("Volcano Plot")
plt.show()

# ðŸ“Œ Install dependencies
!pip install GEOparse statsmodels matplotlib seaborn

import GEOparse
import pandas as pd
import statsmodels.api as sm
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# ðŸ“Œ Download GEO dataset
print("Downloading GSE166622...")
gse = GEOparse.get_GEO("GSE166622", destdir="./")
samples = gse.gsms

# ðŸ“Œ Inspect available columns in one sample
sample_example = list(samples.keys())[0]
print(f"Sample: {sample_example}")
print(samples[sample_example].table.head())

# ðŸ“Œ Choose the correct column name here:
# Run this cell and look for the correct column in output above
COLUMN_NAME = "VALUE"  # change to the correct one if not found

# You can also automatically try to detect:
valid_cols = ["VALUE", "Normalized_Signal", "Signal", "FPKM", "log2CPM", "Intensity"]
for col in valid_cols:
    if col in samples[sample_example].table.columns:
        COLUMN_NAME = col
        break

print(f"Using column: {COLUMN_NAME}")

# ðŸ“Œ Build expression matrix
data = pd.DataFrame()
for gsm_name, gsm in samples.items():
    data[gsm_name] = gsm.table[COLUMN_NAME].astype(float)

data.index = samples[sample_example].table["ID_REF"]

print(f"Expression matrix shape: {data.shape}")
print(data.head())

# ðŸ“Œ Define sample groups
# Adjust here based on your metadata â€” example: 12 controls & 12 infected
groups = []
for gsm_name in data.columns:
    title = samples[gsm_name].metadata["title"][0].lower()
    if "mock" in title or "control" in title:
        groups.append("control")
    elif "sars" in title or "infected" in title:
        groups.append("infected")
    else:
        groups.append("unknown")

print(f"Groups: {groups}")

# ðŸ“Œ Build design matrix
design = pd.get_dummies(groups, drop_first=True)  # infected=1 vs control=0
design.columns = ["infected"]
print(design.head())

# ðŸ“Œ Run linear model for each gene
pvals, logfc = [], []
for gene in data.index:
    y = data.loc[gene].values
    model = sm.OLS(y, sm.add_constant(design)).fit()
    pvals.append(model.pvalues[1])
    logfc.append(model.params[1])

results = pd.DataFrame({
    "log2FC": logfc,
    "pval": pvals
}, index=data.index)

results["adj_pval"] = sm.stats.multipletests(results["pval"], method="fdr_bh")[1]
results.to_csv("GSE166622_DEG_results.csv")
print(results.head())

# ðŸ“Œ Volcano plot
results["-log10_pval"] = -np.log10(results["pval"])
plt.figure(figsize=(8,6))
sns.scatterplot(x=results["log2FC"], y=results["-log10_pval"], alpha=0.5)
plt.axvline(1, color='red', linestyle='--')
plt.axvline(-1, color='red', linestyle='--')
plt.axhline(-np.log10(0.05), color='blue', linestyle='--')
plt.xlabel("log2 Fold Change")
plt.ylabel("-log10 p-value")
plt.title("Volcano Plot: GSE166622 Infected vs Control")
plt.show()

!pip install GEOparse statsmodels matplotlib seaborn

import GEOparse
import pandas as pd
import statsmodels.api as sm
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

print("Downloading GSE166622...")
gse = GEOparse.get_GEO("GSE166622", destdir="./")
samples = gse.gsms

sample_example = list(samples.keys())[0]
print(f"Sample: {sample_example}")
print(samples[sample_example].table.head())

print(samples[sample_example].table.head())

import os
import tarfile
import pandas as pd
from tqdm import tqdm

# ðŸ“Œ Step 1: Move uploaded file to working path
uploaded_tar = "/content/GSE166622_RAW.tar"  # already uploaded
extract_dir = "GSE166622_RAW"

# ðŸ“Œ Step 2: Extract .tar archive
if not os.path.exists(extract_dir):
    os.makedirs(extract_dir)
    with tarfile.open(uploaded_tar, "r") as tar:
        tar.extractall(path=extract_dir)
    print(f"Extracted to {extract_dir}/")
else:
    print(f"Already extracted to {extract_dir}/")

# ðŸ“Œ Step 3: Read all files and merge into count matrix
files = sorted(os.listdir(extract_dir))
print(f"Found {len(files)} sample files.")

all_counts = []
sample_names = []

for file in tqdm(files):
    filepath = os.path.join(extract_dir, file)
    df = pd.read_csv(filepath, sep="\t", header=None, names=["Gene", "Count"])
    if not all_counts:
        gene_index = df["Gene"]
    all_counts.append(df["Count"])
    sample_names.append(file.replace(".txt", "").replace(".gz", ""))

# ðŸ“Œ Combine into DataFrame
count_matrix = pd.concat(all_counts, axis=1)
count_matrix.index = gene_index
count_matrix.columns = sample_names

print(count_matrix.head())
print(f"Shape: {count_matrix.shape}")

# ðŸ“Œ Save count matrix to CSV
count_matrix.to_csv("GSE166622_counts.csv")
print("âœ… Saved combined count matrix as GSE166622_counts.csv")